[
  {
    "title": "COMP 108 Computer Science C. Edge Option Reflective Learning I",
    "credits": 3,
    "prerequisites": "Permission of the GCS is required.",
    "corequisites": "",
    "description": "This course is a reflective learning module for students in their related field which is based on their academic requirements and their first C. Edge term.",
    "components": "Lecture",
    "notes": null,
    "offeredIn": []
  },
  {
    "title": "COMP 208 Computer Science C. Edge Option Reflective Learning II",
    "credits": 3,
    "prerequisites": "COMP 108.",
    "corequisites": "",
    "description": "This course expands on the students' second C. Edge term in their related field of study to further develop their knowledge and work-related skills.",
    "components": "Lecture",
    "notes": null,
    "offeredIn": []
  },
  {
    "title": "COMP 218 Fundamentals of Programming",
    "credits": 3,
    "prerequisites": "MATH 201 / equivalent.",
    "corequisites": "",
    "description": "Computers and computing: problem solving with computers, basic data types, expressions, assignments, control structures, simple library functions, programmer-defined functions, arrays of basic types. Basic elements of object-oriented programming: classes, objects and methods.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week",
    "notes": "This course may not be taken for credit in the regular undergraduate programs in the Gina Cody School of Engineering and Computer Science. Students who have received credit for COMP 248 or COEN 243 may not take this course for credit.",
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "COMP 228 System Hardware",
    "credits": 3,
    "prerequisites": "MATH 203.",
    "corequisites": "MATH 203.",
    "description": "Levels of system abstraction and von Neumann model. Basics of digital logic design. Data representation and manipulation. Instruction set architecture. Processor internals. Assembly language programming. Memory subsystem and cache management. I/O subsystem. Introduction to network organization and architecture.",
    "components": "Lecture 3 hours per week; Tutorial 2 hours per week",
    "notes": "Students who have received credit for SOEN 228 may not take this course for credit.",
    "offeredIn": [
      "fall",
      "summer",
      "winter"
    ]
  },
  {
    "title": "COMP 232 Mathematics for Computer Science",
    "credits": 3,
    "prerequisites": "MATH 203 / Cegep Mathematics 103 / NYA; MATH 204 / Cegep Mathematics 105 / NYC.",
    "corequisites": "",
    "description": "Sets. Propositional logic and predicate calculus. Functions and relations. Elements of number theory. Mathematical reasoning. Proof techniques: direct proof, indirect proof, proof by contradiction, proof by induction.",
    "components": "Lecture 3 hours per week; Tutorial 2 hours per week",
    "notes": "Students who have received credit for COMP 238 or COEN 231 may not take this course for credit.",
    "offeredIn": [
      "fall",
      "summer",
      "winter"
    ]
  },
  {
    "title": "COMP 233 Probability and Statistics for Computer Science",
    "credits": 3,
    "prerequisites": "MATH 205 / Cegep Mathematics 203 / NYB.",
    "corequisites": "",
    "description": "Combinatorics. Axioms of probability. Conditional probability. Discrete and continuous probability distributions. Expectation and moments. Hypothesis testing. Parameter estimation. Correlation and linear regression. Applications to computer science.",
    "components": "Lecture 3 hours per week; Tutorial 2 hours per week",
    "notes": "Students who have received credit for BIOL 322, ENGR 371, STAT 249, STAT 250, COMM 215, MAST 221, MAST 333 may not take this course for credit.",
    "offeredIn": [
      "fall",
      "summer",
      "winter"
    ]
  },
  {
    "title": "COMP 248 Object-Oriented Programming I",
    "credits": 3.5,
    "prerequisites": "MATH 204.",
    "corequisites": "MATH 204.",
    "description": "Introduction to programming. Basic data types, variables, expressions, assignments, control flow. Classes, objects, methods. Information hiding, public vs. private visibility, data abstraction and encapsulation. References. Arrays.",
    "components": "Lecture 3 hours per week; Tutorial 2 hours per week; Laboratory 1 hour per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "summer",
      "winter"
    ]
  },
  {
    "title": "COMP 249 Object-Oriented Programming II",
    "credits": 3.5,
    "prerequisites": "MATH 205.",
    "corequisites": "MATH 205.",
    "description": "Design of classes. Inheritance. Polymorphism. Static and dynamic binding. Abstract classes. Exception handling. File I/O. Recursion. Interfaces and inner classes. Graphical user interfaces. Generics. Collections and iterators.",
    "components": "Lecture 3 hours per week; Tutorial 2 hours per week; Laboratory 1 hour per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "summer",
      "winter"
    ]
  },
  {
    "title": "COMP 326 Computer Architecture",
    "credits": 3,
    "prerequisites": "COMP 346.",
    "corequisites": "",
    "description": "Computer architecture models: control-flow and data-flow. Concurrency and locality, data dependency theory. Instruction level parallelism. Instruction scheduling. Pipelined processors. Vector processors. Thread level parallelism. Multiprocessors. Shared memory models. Coherence protocols. Interconnection networks. Performance issues. Advanced topics in contemporary computer architectures.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week",
    "notes": null,
    "offeredIn": [
      "fall"
    ]
  },
  {
    "title": "COMP 333 Data Analytics",
    "credits": 4,
    "prerequisites": "COMP 233 / ENGR 371; COMP 352; ENCS 282.",
    "corequisites": "",
    "description": "This course introduces the process of data analytics with the aid of examples from several disciplines. It covers data wrangling: extract-transform-load (ETL), cleaning, structuring, integration; data analytics activities: description, prescription, modelling, simulation, optimization, storytelling; and the Python ecosystem: language, libraries, and Jupyter environment.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "COMP 335 Introduction to Theoretical Computer Science",
    "credits": 3,
    "prerequisites": "COMP 232 / COEN 231; and COMP 249 / COEN 244.",
    "corequisites": "",
    "description": "This course covers the following topics: finite state automata and regular languages; push - down automata and context - free languages; pumping lemmas; applications to parsing; Turing machines; undecidability and decidability.",
    "components": "Lecture 3 hours per week; Tutorial 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "summer",
      "winter"
    ]
  },
  {
    "title": "COMP 339 Combinatorics",
    "credits": 3,
    "prerequisites": "COMP 232; / students must complete have completed 18 credits in post-Cegep Mathematics prior to enrolling.",
    "corequisites": "",
    "description": "General principles of counting, permutations, combinations, identities, partitions, generating functions, Fibonacci numbers, Stirling numbers, Catalan numbers, principle of inclusion-exclusion. Graphs, subgraphs, isomorphism, Euler graphs, Hamilton paths and cycles, planar graphs, Kuratowski's Theorem, trees, colouring, 5-colour theorem, matching, Hall's theorem.",
    "components": "Lecture; Tutorial",
    "notes": "Students who have received credit for MATH 339 may not take this course for credit.",
    "offeredIn": [
      "fall"
    ]
  },
  {
    "title": "COMP 345 Advanced Program Design with C++",
    "credits": 4,
    "prerequisites": "COMP 352.",
    "corequisites": "COMP 352.",
    "description": "Introduction to C++. I/O with stream classes. Pointers and their uses. The Standard Template Library (STL): containers, algorithms, iterators, adaptors, function objects. Class design: constructors, destructors, operator overloading, inheritance, virtual functions, exception handling, memory management. Advanced topics: libraries, locales, STL conventions, concurrency, template metaprogramming. Applications of C++: systems, engineering, games programming. Project.",
    "components": "Lecture 3 hours per week; Tutorial 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "COMP 346 Operating Systems",
    "credits": 4,
    "prerequisites": "COMP 228 / SOEN 228; COMP 352.",
    "corequisites": "",
    "description": "Fundamentals of operating system functionalities, design and implementation. Multiprogramming: processes and threads, context switching, queuing models and scheduling. Interprocess communication and synchronization. Principles of concurrency. Synchronization primitives. Deadlock detection and recovery, prevention and avoidance schemes. Memory management. Device management. File systems. Protection models and schemes.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week; Laboratory 2 hours per week",
    "notes": "Students who have received credit for COEN 346 may not take this course for credit.",
    "offeredIn": [
      "fall",
      "summer",
      "winter"
    ]
  },
  {
    "title": "COMP 348 Principles of Programming Languages",
    "credits": 3,
    "prerequisites": "COMP 249.",
    "corequisites": "",
    "description": "The course discusses the design, efficiency, and implementation of programming languages. A comparison of common high-level programming paradigms, including both imperative and functional approaches, is provided. Core language features such as binding, visibility, and scope are evaluated across a set of current and historical languages. In addition, statically constrained typing and memory management models are compared to dynamic run-time alternatives, with an emphasis on the trade-offs between flexibility and performance.",
    "components": "Lecture 2 hours per week; Tutorial 1 hour per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "summer",
      "winter"
    ]
  },
  {
    "title": "COMP 352 Data Structures and Algorithms",
    "credits": 3,
    "prerequisites": "COMP 232.",
    "corequisites": "COMP 232.",
    "description": "Abstract data types: stacks and queues, trees, priority queues, dictionaries. Data structures: arrays, linked lists, heaps, hash tables, search trees. Design and analysis of algorithms: asymptotic notation, recursive algorithms, searching and sorting, tree traversal, graph algorithms.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week",
    "notes": "Students who have received credit for COEN 352 may not take this course for credit.",
    "offeredIn": [
      "fall",
      "summer",
      "winter"
    ]
  },
  {
    "title": "COMP 353 Databases",
    "credits": 4,
    "prerequisites": "COMP 232 / COEN 231; and COMP 352 / COEN 352.",
    "corequisites": "",
    "description": "This course introduces database design, applications, and aspects of database management systems. It covers conceptual database design using the entity-relationship model. Students are introduced to the relational data model, relational algebra, as well as the SQL language, and their applications. Furthermore, the course covers the development of database applications. Students also learn about other data models, including Datalog and Object-oriented. A project is required.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week; Laboratory 2 hours per week",
    "notes": "Students in the B Eng in Software Engineering program may not take this course for credit. Students who have received credit for SOEN 363 may not take this course for credit.",
    "offeredIn": [
      "fall",
      "summer",
      "winter"
    ]
  },
  {
    "title": "COMP 354 Introduction to Software Engineering",
    "credits": 4,
    "prerequisites": "COMP 352; ENCS 282.",
    "corequisites": "",
    "description": "Software development process models (e. g. linear vs. iterative). Project management; roles, activities and deliverables for each software life cycle phase. Requirements management: analysis, elicitation, and scope. Architecture, design and the mapping of requirements to design and design to implementation. Traceability. Software quality assurance: verification, validation and the role of testing. Maintenance and evolution. Project.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week; Laboratory 2 hour per week",
    "notes": "Students who have received credit for SOEN 341 may not take this course for credit. Students in the B Eng in Software Engineering program may not take this course for credit.",
    "offeredIn": [
      "fall",
      "summer",
      "winter"
    ]
  },
  {
    "title": "COMP 361 Elementary Numerical Methods",
    "credits": 3,
    "prerequisites": "COMP 232, COMP 249.",
    "corequisites": "",
    "description": "Vector and matrix norms. Numerical methods for solving linear systems, Gaussian elimination, LU decomposition, error analysis. Numerical solution of nonlinear equations, Newton's method, fixed point iterations. Interpolation and approximation, Taylor, Lagrange, Chebyshev and Legendre polynomials. Cubic spline interpolation. Numerical differentiation, numerical integration, Gauss quadrature. Discrete least-squares approximation. Initial value problems in ordinary differential equations, stiff differential equations. Boundary value problems in ordinary differential equations.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week",
    "notes": "Students who have received credit for ENGR 391 or MAST 334 may not take this course for credit.",
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "COMP 367 Techniques in Symbolic Computation",
    "credits": 3,
    "prerequisites": "MATH 222 / COMP 232 / equivalent; COMP 248 / equivalent.",
    "corequisites": "",
    "description": "This course is an application-oriented introduction to algebraic methods involved in symbolic computation, as it applies to number theory and modular algebra, and covering the following topics: numbers, primes, modular arithmetic, Diophantine equations; congruence classes and applications, finite fields and rings; Fermat's and Euler's theorems; Chinese Remainder theorem and applications; polynomial congruences and rings. Applications to: error-correcting codes (Humming codes), Hill Cryptosystem, public key encryption schemes, polynomial factorization, polynomial interpolation. A symbolic computation system (e. g. MAPLE), is used as a computational tool and a platform for writing all assignments and tests but not as an object of study itself.",
    "components": "Lecture",
    "notes": "Students who have received credit for MAST 332 may not take this course for credit.",
    "offeredIn": [
      "winter"
    ]
  },
  {
    "title": "COMP 371 Computer Graphics",
    "credits": 4,
    "prerequisites": "COMP 232 / COEN 231; COMP 352 / COEN 352.",
    "corequisites": "",
    "description": "This course covers the following topics: introduction to computer graphics and graphics hardware; introduction to graphics API and graphics systems architecture; mathematics of 2 D and 3 D transformations and 2 D and 3 D viewing; colour and basic rendering algorithms; visual realism and visibility; illumination and shading and global illumination techniques and textures; introduction to curves and surfaces and 3 D object modelling; introduction to computer animation. This course includes a project.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "summer",
      "winter"
    ]
  },
  {
    "title": "COMP 376 Introduction to Game Development",
    "credits": 4,
    "prerequisites": "COMP 371.",
    "corequisites": "",
    "description": "This course introduces students to design and implementation aspects of computer gaming, including topics such as game technologies, basic game design, programming, applied mathematics, storytelling and narratives, and game genres. The course covers virtual environments, 2 D and 3 D game engines, and game development tools. Furthermore, students learn about character development, gameplay strategies, level design in games, and user interfaces. Other topics covered in the course include architecture of game consoles, analog and digital controllers, and the incorporation of graphics, sound, and music in game implementations. During the course, the students develop 2 D and 3 D games. A project is required.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": "Students who have received credit for CART 315 may not take this course for credit.",
    "offeredIn": [
      "fall"
    ]
  },
  {
    "title": "COMP 425 Computer Vision",
    "credits": 4,
    "prerequisites": "",
    "corequisites": "",
    "description": "This course introduces basic techniques and concepts in computer vision including image formation, grouping and fitting, geometric vision, recognition, perceptual organization, and the state-of-the-art software tools. Students learn fundamental algorithms and techniques, and gain experience in programming vision-based components. A project is required.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "winter"
    ]
  },
  {
    "title": "COMP 426 Multicore Programming",
    "credits": 4,
    "prerequisites": "COMP 346 / COEN 346.",
    "corequisites": "",
    "description": "Fundamental concepts of computer architecture. Architecture of the selected multicore platform. Review of shared-memory parallel programming. The difficulties inherent to parallel programming. Scalability of programming models. The stream programming model for multicore. Implicit and explicit threading. Implicit and explicit orchestration of data movement, both on chip and off. Adapting standard algorithms to multicore. Critical assessment of the available system-software support. Project.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall"
    ]
  },
  {
    "title": "COMP 428 Parallel Programming",
    "credits": 4,
    "prerequisites": "COMP 346 / COEN 346.",
    "corequisites": "",
    "description": "Parallel programming techniques as a natural extension to sequential programming. Overview of parallel programming architectures and models. Parallel programming issues: locality, granularity, scheduling, data decomposition and distribution, load balancing, communication and synchronization, determinacy and non-determinacy, cost and performance. Techniques and tools for message-passing parallel programming. Case studies. Project.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall"
    ]
  },
  {
    "title": "COMP 432 Machine Learning",
    "credits": 4,
    "prerequisites": "COMP 352.",
    "corequisites": "",
    "description": "This course introduces conceptual and practical aspects of machine learning. Concepts include regression, classification, maximum likelihood estimation, discriminative vs. generative modelling, generalization, supervised learning, unsupervised learning, semi-supervised learning and transfer learning. Methods include linear models, mixture models, nearest neighbours, support vector machines, random forests, boosting, and basics of deep learning. A project is required.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "COMP 433 Introduction to Deep Learning",
    "credits": 4,
    "prerequisites": "COMP 352.",
    "corequisites": "",
    "description": "This course introduces conceptual and practical aspects of deep learning and their implementation in software. Topics covered include commonly used deep learning model architectures, loss functions, regularization, optimization methods, and a strong emphasis is placed on review of their foundations and use of software tools such as pytorch, jax, and tensorflow to implement and/or apply these models. Applications in computer vision and natural language processing are covered. A final project is required.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall"
    ]
  },
  {
    "title": "COMP 438 Geometric Modelling and Processing",
    "credits": 4,
    "prerequisites": "COMP 352.",
    "corequisites": "",
    "description": "This course exposes students to the geometric modelling pipeline. It includes topics such as efficient mesh data structures such as half-edge and cornertable, digital differential geometry, spectral mesh processing, discrete modelling tools and analytic modelling tools (B-Splines, Bezier and subdivision surfaces), optimization-driven modelling and simulation, 3 D shape acquisition, 3 D printing and prototyping. Application-related topics are discussed such as smoothing, resampling, compression, as well as deep neural network architectures for geometric data and modelling problems. A project is required.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "winter"
    ]
  },
  {
    "title": "COMP 442 Compiler Design",
    "credits": 4,
    "prerequisites": "COMP 228 / SOEN 228 / COEN 311; COMP 335; COMP 352 / COEN 352.",
    "corequisites": "",
    "description": "Compiler organization and implementation: lexical analysis and parsing, syntax-directed translation, code optimization. Run-time systems. Project.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "winter"
    ]
  },
  {
    "title": "COMP 444 System Software Design",
    "credits": 4,
    "prerequisites": "COMP 346.",
    "corequisites": "",
    "description": "Detailed examination of the design, implementation and system call interface of a contemporary operating system: its kernel, file system, process and thread management including scheduling, file system design and implementation, memory management, device management, I/O management, interprocess communication and synchronization mechanisms, system call interface, interrupt handling, and other advanced issues. Project.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": []
  },
  {
    "title": "COMP 445 Data Communication and Computer Networks",
    "credits": 4,
    "prerequisites": "COMP 346.",
    "corequisites": "",
    "description": "This course introduces the fundamentals of networking protocols and communication technologies. Topics covered include network architectures and service models, principles behind the design of protocol stacks, local and wide area networks, and the Internet. The course also covers a review of the foundations and performance of application layer protocols, reliable delivery mechanisms, congestion and flow control, control and data planes, routing and switching, error detection and correction, and multiple access protocols. The course includes an introduction to wireless networking and security.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "COMP 451 Database Design",
    "credits": 4,
    "prerequisites": "COMP 353.",
    "corequisites": "",
    "description": "Storage management. Buffer management. Data organization. Index structures. Query optimization and execution. Transaction management. Recovery. Concurrency control. Database performance analysis and tuning. New trends in database technology. Project.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": []
  },
  {
    "title": "COMP 465 Design and Analysis of Algorithms",
    "credits": 3,
    "prerequisites": "COMP 232 / COEN 231; COMP 339; COMP 352 / COEN 352.",
    "corequisites": "",
    "description": "Order statistics: worst-case, average-case and amortized analysis. Algorithm design techniques: greedy algorithms, dynamic programming. Selected algorithms from graph theory, linear programming, number theory, string matching, and computational geometry. A survey of hard problems, NP-completeness, and approximation algorithms.",
    "components": "Lecture 3 hours per week",
    "notes": null,
    "offeredIn": [
      "winter"
    ]
  },
  {
    "title": "COMP 472 Artificial Intelligence",
    "credits": 4,
    "prerequisites": "COMP 352 / COEN 352.",
    "corequisites": "",
    "description": "This course initially describes the scope and history of Artificial Intelligence. Then it covers knowledge representation, heuristic search, game playing and planning. Finally, it introduces the topics of machine learning, genetic algorithms and natural language processing. A project is required.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "summer",
      "winter"
    ]
  },
  {
    "title": "COMP 473 Pattern Recognition",
    "credits": 4,
    "prerequisites": "COMP 352.",
    "corequisites": "",
    "description": "Preprocessing. Feature extraction and selection. Similarity between patterns and distance measurements. Syntactic and statistical approaches. Clustering analysis. Bayesian decision theory and discriminant functions. Neural networks and machine learning. Applications. Project.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall"
    ]
  },
  {
    "title": "COMP 474 Intelligent Systems",
    "credits": 4,
    "prerequisites": "COMP 352 / COEN 352.",
    "corequisites": "",
    "description": "Rule-based expert systems, blackboard architecture, and agent-based. Knowledge acquisition and representation. Uncertainty and conflict resolution. Reasoning and explanation. Design of intelligent systems. Project.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "winter"
    ]
  },
  {
    "title": "COMP 475 Immersive Technologies",
    "credits": 4,
    "prerequisites": "COMP 371.",
    "corequisites": "",
    "description": "This course covers the fundamentals of immersive technologies, a brief history and overview of immersive technologies, analyzes case studies of interactive experiences using immersive technologies, and identifies the main challenges of the current state of the art. Furthermore, it covers the basic principles of 3 D graphics for creating virtual assets and environments, and basic concepts and technologies for interaction. A project provides hands-on experience in the design and development of interactive experiences with the user of immersive technologies.",
    "components": "Lecture 3 hours per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "COMP 476 Advanced Game Development",
    "credits": 4,
    "prerequisites": "COMP 361 / ENGR 391; COMP 376.",
    "corequisites": "",
    "description": "Introduction to advanced aspects of computer games. Game engine design. Artificial Intelligence (AI): non-player character movement, coordinated movement, pathfinding, world representations; decision making; tactical AI, strategic AI, learning in games. Physics-based techniques: collision detection and response. Networked gaming: multi-player games, networking and distributed game design, mobile gaming. Improving realism: cut scenes, 3 D sound. Project.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "winter"
    ]
  },
  {
    "title": "COMP 477 Animation for Computer Games",
    "credits": 4,
    "prerequisites": "COMP 361 / ENGR 391, COMP 371.",
    "corequisites": "",
    "description": "Introduction to the algorithms, data structures, and techniques used in modelling and rendering dynamic scenes. Topics include principles of traditional animation, production pipeline, animation hardware and software, orientation representation and interpolation, modelling physical and articulated objects, forward and inverse kinematics, motion control and capture, key-frame, procedural, and behavioural animation, camera animation, scripting system, and free-form deformation. Project.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall"
    ]
  },
  {
    "title": "COMP 478 Image Processing",
    "credits": 4,
    "prerequisites": "COMP 352.",
    "corequisites": "",
    "description": "Digital image fundamentals, image transforms (Fourier, Walsh, Haar, Hotelling, wavelet), image enhancement (histogram processing, spatial filtering, high- and low-pass filtering), image restoration, image compression (elements of information theory, image compression models, error-free compression, lossy compression, image compression standards), image segmentation (line detection, Hough transform, edge detection and linking, thresholding, region splitting and merging), representation and description (chain codes, signatures, skeletons, shape descriptors, moments, texture). Project.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "COMP 479 Information Retrieval and Web Search",
    "credits": 4,
    "prerequisites": "COMP 233 / ENGR 371; COMP 352.",
    "corequisites": "",
    "description": "Basics of information retrieval (IR): boolean, vector space and probabilistic models. Tokenization and creation of inverted files. Weighting schemes. Evaluation of IR systems: precision, recall, F-measure. Relevance feedback and query expansion. Application of IR to web search engines: XML, link analysis, Page Rank algorithm. Text categorization and clustering techniques as used in spam filtering. Project.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall"
    ]
  },
  {
    "title": "COMP 490 Computer Science Project I",
    "credits": 3,
    "prerequisites": "ENCS 282.",
    "corequisites": "",
    "description": "Students work on a computer science project under the supervision of a faculty member and submit a suitable written report on the work carried out.",
    "components": "Lecture",
    "notes": "Students can register for COMP 490 by itself or, with the permission of the Department, students can register for COMP 490 and 492 concurrently and carry out a major project.",
    "offeredIn": []
  },
  {
    "title": "COMP 492 Computer Science Project II",
    "credits": 3,
    "prerequisites": "COMP 490.",
    "corequisites": "COMP 490.",
    "description": "Students work on a computer science project under the supervision of a faculty member and submit a suitable written report on the work carried out.",
    "components": "Lecture",
    "notes": "Students can register for COMP 492 by itself or, with the permission of the Department, students can register for COMP 490 and COMP 492 concurrently and carry out a major project.",
    "offeredIn": []
  },
  {
    "title": "COMP 493 Computational Biology Team Project",
    "credits": 6,
    "prerequisites": "BIOL 367; COMP 352.",
    "corequisites": "",
    "description": "Students form teams or join existing teams (such as those in research labs) and work under faculty supervision to solve a computational biology research problem or to carry out a computational biology research project. The research problem or project involves the utilization of knowledge of biology and of computing, involves computing lab and/or wet lab practice and contributes to any of the areas of computational biology. The project fosters teamwork and allows students to develop their project management, technical writing and oral presentation skills.",
    "components": "Research",
    "notes": "Students who have received credit for BIOL 493 may not take this course for credit.",
    "offeredIn": []
  },
  {
    "title": "COMP 495 Honours Seminar",
    "credits": 1,
    "prerequisites": "ENCS 282.",
    "corequisites": "",
    "description": "Students are required to attend a number of departmental seminars and submit a written report on them.",
    "components": "Seminar",
    "notes": null,
    "offeredIn": []
  },
  {
    "title": "COMP 498 Topics in Computer Science",
    "credits": 3,
    "prerequisites": "Permission of the Department is required.",
    "corequisites": "",
    "description": "This course may be offered in a given year upon the authorization of the Department. The content may vary from offering to offering and will be chosen to complement the available elective courses.",
    "components": "Lecture 3 hours per week",
    "notes": null,
    "offeredIn": []
  },
  {
    "title": "COMP 499 Topics in Computer Science with Lab",
    "credits": 4,
    "prerequisites": "Permission of the Department is required.",
    "corequisites": "",
    "description": "The content may vary from offering to offering and will be chosen to complement the available elective courses.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "SOEN 228 System Hardware",
    "credits": 4,
    "prerequisites": "MATH 203 / Cegep Mathematics 103, MATH 204 / Cegep Mathematics 105.",
    "corequisites": "",
    "description": "This course covers the following topics: Boolean Algebra, Digital logic and the design of logic circuits; CPU design; addressing modes; instruction sets and sequencing; design of datapath and control units; memory systems and types; cache memory levels; I/O devices and their interconnection to the CPU; assembly language, and Interrupts.",
    "components": "Lecture 3 hours per week; Tutorial 2 hours per week; Laboratory 2 hours per week",
    "notes": "Students who have received credit for COMP 228 may not take this course for credit.",
    "offeredIn": [
      "summer",
      "winter"
    ]
  },
  {
    "title": "SOEN 287 Web Programming",
    "credits": 3,
    "prerequisites": "COMP 248.",
    "corequisites": "",
    "description": "This course covers the following topics: internet architecture and protocols; web applications through clients and servers; modern HTML and CSS; client-side programming using modern Java Script and an overview of the advantages of some common modern Java Script libraries; Regular Expressions; static website contents and dynamic page generation through server-side programming; preserving state (client-side) in web applications; deploying static and dynamic websites and content management systems vs. website deployment.",
    "components": "Lecture 3 hours per week; Tutorial 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "summer",
      "winter"
    ]
  },
  {
    "title": "SOEN 298 System Hardware Lab",
    "credits": 1,
    "prerequisites": "Permission of the undergraduate program director is required.",
    "corequisites": "",
    "description": "Digital design exercises including assembly and testing corresponding to the SOEN 228 lab.",
    "components": "Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": []
  },
  {
    "title": "SOEN 321 Information Systems Security",
    "credits": 3,
    "prerequisites": "COMP 346 / COEN 346.",
    "corequisites": "",
    "description": "This course covers the following topics: introduction to cryptography and cryptanalysis; threats, attacks, and vulnerabilities; security services (confidentiality, authentication, integrity); public key systems including Diffie-Hellman, RSA, Rabin; Digital Signature Schemes; Hash functions and MAC schemes; authentication protocols; network layers and security; protocols; Public Key Infrastructure (PKI); Transport Layer Security (TLS); firewalls; Intrusion Detection Systems; DNS security; Denial of Service Attacks; Penetration testing; Online Privacy and anonymity; Mix networks and Onion Routing; TOR; Malware; Botnets; Spam and Hot topics in Security and Privacy.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "SOEN 331 Formal Methods for Software Engineering",
    "credits": 3,
    "prerequisites": "COMP 232, COMP 249.",
    "corequisites": "",
    "description": "This course covers the following topics: property-based (axiomatic and algebraic) formalisms and model-based (abstract and visual) formalisms; axiomatic formalisms with temporal logic, assertions and contracts; algebraic formalisms through algebraic specifications; abstract formalisms through the Z and Object-Z specification languages; visual formalisms through automata (finite state machines and extended finite state machines).",
    "components": "Lecture 3 hours per week; Tutorial 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "SOEN 341 Software Process and Practices",
    "credits": 4,
    "prerequisites": "COMP 352.",
    "corequisites": "COMP 352.",
    "description": "This course covers the following topics: basic principles of software engineering; introduction to software process, including activities, phases, organization, roles, teamwork, and conflict resolution; notations used in software engineering; software development practices, including documentation, modern version control, review, testing, agile, and continuous integration.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week; Laboratory 2 hours per week",
    "notes": "Students who have received credit for COMP 354 may not take this course for credit.",
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "SOEN 342 Software Requirements and Deployment",
    "credits": 4,
    "prerequisites": "SOEN 341.",
    "corequisites": "",
    "description": "This course covers the following topics: requirements engineering; eliciting and coping with changing and evolving requirements; deployment of a software system under real-life functional and non-functional requirements scenarios; understanding how requirements impact early-stage and deployed software systems through all phases of engineering, including design, implementation, test and verification, deployment, and evolution. A project is required.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "SOEN 343 Software Architecture and Design",
    "credits": 4,
    "prerequisites": "SOEN 341.",
    "corequisites": "SOEN 341.",
    "description": "This course covers the following topics: from requirements to design to implementation; planned vs. evolutionary design and refactoring; model-driven design and Unified Modelling Language (UML); structural and behavioural design descriptions and specifications; general and domain-specific design principles, patterns and idioms; introduction to software architecture (styles and view models); design quality; architectural debt; design smells; refactoring Anti-Patterns to Patterns; design rationale.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "SOEN 344 Advanced Software Architecture and Design",
    "credits": 3,
    "prerequisites": "SOEN 343.",
    "corequisites": "",
    "description": "This course covers the following topics: architectural activities, roles, and deliverables; architectural view models; architectural styles (including client-server, layered, pipes-and-filters, event-based, process control) and frameworks; architectural analysis and the interplay with requirements elicitation; notations for expressing architectural designs, structural and behavioural specifications; from architectural design to detailed design; domain specific architectures and design patterns; evaluation and performance estimation of designs; advanced object-oriented design patterns and idioms.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week",
    "notes": null,
    "offeredIn": []
  },
  {
    "title": "SOEN 345 Software Testing, Verification and Quality Assurance",
    "credits": 4,
    "prerequisites": "SOEN 343.",
    "corequisites": "SOEN 343.",
    "description": "This course explores a range of essential testing and development practices, including unit testing, test-driven development, and legacy system testing. Students learn about mocking, dependency injection, and strategies for breaking system dependencies. The course also covers integration and system testing, along with test planning and management, including test prioritization and handling flaky tests. Advanced topics such as static analysis, bisection, fuzzing, and verification are introduced. Additionally, the course delves into continuous integration, continuous delivery, and Dev Ops testing, with a focus on practices like A/B testing.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "SOEN 357 User Interface Design",
    "credits": 3,
    "prerequisites": "SOEN 341 / COMP 354.",
    "corequisites": "",
    "description": "This course covers the following topics: principles, standards and guidelines for user interface design; usability principles and user experience; standards and design rationale for user-centred design; task-centred design; rationalized design; usability engineering; user models; interface design process, including interface requirement gathering, conceptual design and prototyping, and evaluation; usability testing and analytic evaluation; data gathering and analysis techniques for qualitative and quantitative data; interface design documentation; design approaches for touch, gesture-based, and haptic interfaces.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "SOEN 363 Data Systems for Software Engineers",
    "credits": 3,
    "prerequisites": "COMP 352.",
    "corequisites": "",
    "description": "This course covers the following topics: introduction to the current data ecosystem; relational databases; key-value databases; document databases; column databases; graph databases; RDF stores; parallel and distributed file systems, data processing engines; data stream analytics; and data infrastructure.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week",
    "notes": "Students who have received credit for COMP 353 may not take this course for credit.",
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "SOEN 384 Management, Measurement and Quality Control",
    "credits": 3,
    "prerequisites": "ENCS 282; SOEN 341.",
    "corequisites": "",
    "description": "Organization of large software development. Roles of team members, leaders, managers, stakeholders, and users. Tools for monitoring and controlling a schedule. Financial, organizational, human, and computational resources allocation and control. Project and quality reviews, inspections, and walkthroughs. Risk management. Communication and collaboration. Cause and effects of project failure. Project management via the Internet. Quality assurance and control.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week",
    "notes": null,
    "offeredIn": [
      "fall",
      "winter"
    ]
  },
  {
    "title": "SOEN 385 Control Systems and Applications",
    "credits": 3,
    "prerequisites": "ENGR 213, ENGR 233.",
    "corequisites": "",
    "description": "Mathematical modelling of dynamical systems; block diagrams; feedback; open and closed loops. Linear differential equations; time domain analysis; free, forced, and total response; steady state and transient response. Laplace transform and inverse transform; second order systems. Transfer functions and stability. Control system design: PID and root locus techniques. Computer simulation of control systems. Applications.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week",
    "notes": null,
    "offeredIn": []
  },
  {
    "title": "SOEN 387 Web-Based Enterprise Application Design",
    "credits": 3,
    "prerequisites": "COMP 353.",
    "corequisites": "COMP 353.",
    "description": "This course introduces Hypertext Transfer Protocol (HTTP), and client/server and layered architectures for Web-based Enterprise Applications (WEA). The course covers Application, Presentation, Domain and Data Source design patterns. Students learn how to use Java servlets and Java Server Pages. The course also covers authentication, security and transaction processing, as well as system-level testing of web applications.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week",
    "notes": null,
    "offeredIn": [
      "fall"
    ]
  },
  {
    "title": "SOEN 390 Software Engineering Team Design Project",
    "credits": 3.5,
    "prerequisites": "SOEN 345.",
    "corequisites": "SOEN 345.",
    "description": "Students work in teams to design and implement a software project from requirements provided by the coordinator. Each team will demonstrate the software and the testing of the software, and prepare adequate documentation for it. In addition, each team will generate a report based on the process of development.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week; Laboratory 3 hours per week",
    "notes": null,
    "offeredIn": [
      "winter"
    ]
  },
  {
    "title": "SOEN 422 Embedded Systems and Software",
    "credits": 4,
    "prerequisites": "COMP 346.",
    "corequisites": "",
    "description": "This course covers the following topics: embedded computer system architectures; programming of interface and peripheral control registers; analog to digital conversion and motor control using pulse width modulation; interrupts, communication methods and their application to interface control and multi-computer systems; architecture and operating systems of advanced embedded designs; design and testing of integrated systems; advanced topics.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week; Laboratory 2 hours per week",
    "notes": "Students who have received credit for COEN 421 may not take this course for credit.",
    "offeredIn": [
      "fall"
    ]
  },
  {
    "title": "SOEN 423 Distributed Systems",
    "credits": 4,
    "prerequisites": "COMP 346.",
    "corequisites": "",
    "description": "This course covers the following topics: principles of distributed computing including scalability, transparency, concurrency, consistency, fault tolerance, high availability; client-server interaction technologies including interprocess communication, sockets, group communication, remote procedure call, remote method invocation, object request broker, web services; server design techniques including process replication, fault tolerance through passive replication, high availability through active replication, coordination and agreement, transactions and concurrency control.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "fall"
    ]
  },
  {
    "title": "SOEN 448 Management of Evolving Systems",
    "credits": 3,
    "prerequisites": "SOEN 342, SOEN 343.",
    "corequisites": "",
    "description": "This course covers the following topics: software maintenance (corrective, perfective, and adaptive); software reuse; construction of reusable software; techniques for reverse engineering and re-engineering software; software development as “growing” software; long-term evolution of existing software systems.",
    "components": "Lecture 3 hours per week",
    "notes": null,
    "offeredIn": []
  },
  {
    "title": "SOEN 471 Big Data Analytics",
    "credits": 4,
    "prerequisites": "COMP 352.",
    "corequisites": "",
    "description": "This course focuses on the fundamentals of the big data terminology, concepts and technologies. For the technical aspects of big data management systems, the course focuses on big data engines, programming models and file systems. Specific techniques covered include supervised classification, recommender systems, data clustering, frequent itemsets mining, similarity search, data streams and graph analysis. A project provides extensive hands-on experience.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "winter"
    ]
  },
  {
    "title": "SOEN 487 Web Services and Applications",
    "credits": 4,
    "prerequisites": "SOEN 387.",
    "corequisites": "",
    "description": "This course covers the following topics: analysis and design of web services and applications; advanced architectures for the design, deployment, and testing of large multi-server web services and applications; Service Oriented Architecture (SOA); Electronic Commerce; security; load balancing; stress testing.",
    "components": "Lecture 3 hours per week; Tutorial 1 hour per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": [
      "winter"
    ]
  },
  {
    "title": "SOEN 490 Capstone Software Engineering Design Project",
    "credits": 6,
    "prerequisites": "SOEN 390.",
    "corequisites": "",
    "description": "Students work in teams of at least four members to construct a significant software application. The class meets at regular intervals. Team members will give a presentation of their contribution to the project.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": []
  },
  {
    "title": "SOEN 491 Software Engineering Project",
    "credits": 1,
    "prerequisites": "Permission of the undergraduate program director is required.",
    "corequisites": "",
    "description": "Theoretical or practical project in an advanced topic in software engineering.",
    "components": "Lecture",
    "notes": null,
    "offeredIn": []
  },
  {
    "title": "SOEN 498 Topics in Software Engineering",
    "credits": 3,
    "prerequisites": "Permission of the undergraduate program director is required.",
    "corequisites": "",
    "description": "This course may be offered in a given year upon the authorization of the Department. The content may vary from offering to offering and will be chosen to complement the available elective courses.",
    "components": "Lecture 3 hours per week.",
    "notes": null,
    "offeredIn": [
      "winter"
    ]
  },
  {
    "title": "SOEN 499 Topics in Software Engineering with Lab",
    "credits": 4,
    "prerequisites": "Permission of the Department is required.",
    "corequisites": "",
    "description": "This course may be offered in a given year upon the authorization of the Department. The content may vary from offering to offering and will be chosen to complement the available elective courses.",
    "components": "Lecture 3 hours per week; Laboratory 2 hours per week",
    "notes": null,
    "offeredIn": []
  }
]